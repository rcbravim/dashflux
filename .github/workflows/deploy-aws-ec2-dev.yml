name: Deploy to AWS EC2 DEV

env:
  # deploy envs
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}           # ${{ secrets.EC2_PRIVATE_KEY }}
  HOSTNAME: ${{ secrets.HOSTNAME }}                         # ${{ secrets.HOSTNAME }}
  USER_NAME: ${{ secrets.USER_NAME }}                       # ${{ secrets.USER_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}                     # ${{ secrets.AWS_REGION }}
  ENVIRONMENT: dev
  CONTAINER_NAME: dashflux-dev
  BRANCH: dev
  WORKDIR: app-dashflux

  # app envs
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  MAIL_DEFAULT_SENDER: ${{ secrets.MAIL_DEFAULT_SENDER }}
  MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
  ADMIN_USER: ${{ secrets.ADMIN_USER }}
  ADMIN_PASS: ${{ secrets.ADMIN_PASS }}
  DEV_USER: ${{ secrets.DEV_USER }}
  DEV_PASS: ${{ secrets.DEV_PASS }}

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Deploy in EC2 DEV

        run: |
          echo "$EC2_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
        
            sudo mkdir -p /$WORKDIR/$CONTAINER_NAME
            cd /$WORKDIR/$CONTAINER_NAME
            sudo chown -R ${USER_NAME}:${USER_NAME} /$WORKDIR/$CONTAINER_NAME
          
            if [ ! -d .git ]; then
              echo 'Cloning the repository for the first time'
              git clone https://github.com/rcbravim/dashflux.git .
              git checkout $BRANCH
            else
              echo 'Fetching the latest code from $BRANCH branch'
              git fetch --all
              git reset --hard origin/$BRANCH
              git pull origin $BRANCH
            fi
            
            echo Copy database if not exists
            if [ ! -e /instance/database.db ]; then
              sudo docker cp $CONTAINER_NAME:/app/instance/database.db $(pwd)/instance/database.db
            fi
            
            echo Stop, remove the existing container and cleaning with docker prune
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true
            sudo docker system prune -af || true
          
            echo Build a new Docker image with the updated code
            sudo docker build -t $CONTAINER_NAME .
            
            echo Run the new container with the data volume mounted
            sudo docker run -d --name $CONTAINER_NAME -p 5002:5000 -v $(pwd)/instance:/app/instance \
              -e MAIL_USERNAME=$MAIL_USERNAME \
              -e MAIL_PASSWORD=$MAIL_PASSWORD \
              -e MAIL_DEFAULT_SENDER=$MAIL_DEFAULT_SENDER \
              -e MAIL_SERVER=$MAIL_SERVER \
              -e MAIL_PORT=$MAIL_PORT \
              -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
              -e FLASK_SECRET_KEY=$FLASK_SECRET_KEY \
              -e ADMIN_USER=$ADMIN_USER \
              -e ADMIN_PASS=$ADMIN_PASS \
              -e DEV_USER=$DEV_USER \
              -e DEV_PASS=$DEV_PASS \
              -e ENVIRONMENT=$ENVIRONMENT \
              --restart always $CONTAINER_NAME
            "
