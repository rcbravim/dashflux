name: Deploy to AWS EC2

env:
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  HOSTNAME: ${{ secrets.HOSTNAME }}                     # ${{ secrets.HOSTNAME }}
  USER_NAME: ${{ env.USER_NAME }}                       # ${{ secrets.USER_NAME }}
  AWS_REGION: ${{ env.AWS_REGION }}                     # ${{ secrets.AWS_REGION }}
  CONTAINER_NAME: flask-invofinance                     # ${{ secrets.CONTAINER_NAME }}
  BRANCH: prd
  WORKDIR: app-henrique

on:
  push:
    branches:
      - prd

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Deploy in EC2

        run: |
          echo "$EC2_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
        
            cd $WORKDIR/$CONTAINER_NAME
          
            echo git checkout/fetch/reset/pull
            git checkout $BRANCH
            git fetch --all
            git reset --hard origin/$BRANCH
            git pull origin $BRANCH
            
            echo Build a new Docker image with the updated code
            sudo docker build -t $CONTAINER_NAME .
            
            echo Copy database if not exists
            if [ ! -e /instance/db.sqlite ]; then
              sudo docker cp flask-invofinance:/app/instance/db.sqlite $(pwd)/instance/db.sqlite
            fi
            
            echo Stop and remove the existing container
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true
            
            echo Run the new container with the data volume mounted
            sudo docker run -d --name $CONTAINER_NAME -p 5000:5000 -v $(pwd)/instance:/app/instance --restart always $CONTAINER_NAME
          "